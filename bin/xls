#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(File.expand_path(__FILE__)), '..', 'lib'))

require 'rubygems'
require 'xls'
require 'commander/import'

program :name, 'XLS'
program :version, Xls::VERSION
program :description, 'A command line utility for working with data in Excel.'


################################################################################
#
# Enumeration
#
################################################################################

def build_enumerator_command(action, description)
  command action do |c|
    c.syntax = "xls #{action.to_s} FILE"
    c.description = description
    c.option('-s SELECTION', 'The Excel style selection to work within.')
    c.option('-e CODE', 'The code to execute for each cell.')
    c.option('--use-headers', 'Whether to use the first row as a header row.')
    c.option('--output FILE', 'The path to the output file.') unless action == :each
    c.when_called do|args, options|
      abort("Input file required") if args.length == 0
      abort("Output file required") if action != :each && options.e.nil?
      abort("Execution code required") if options.e.nil?

      # Run enumerator.
      workbook = Spreadsheet.open(args.first)
      enumerator = Xls::Enumerator.new()
      enumerator.action = action
      enumerator.use_headers = options.use_headers
      enumerator.selection = Xls::Selection.parse(options.s.upcase) unless options.s.nil?
      enumerator.proc = options.e
      enumerator.process(workbook)

      # Write output to file.
      workbook.write(options.output) if action != :each
    end
  end
end

build_enumerator_command(:each, 'Executes Ruby code on each cell of a workbook.')
build_enumerator_command(:map, 'Maps output of Ruby code on each cell.')
build_enumerator_command(:select, 'Keeps each cell where the code evaluates true.')
build_enumerator_command(:reject, 'Keeps each cell where the code evaluates false.')



################################################################################
#
# Transformation
#
################################################################################

command :columnize do |c|
  c.syntax = 'xls columnize FILE'
  c.description = 'Converts table into 2-column rows table.'
  c.option('--output FILE', 'The path to the output file.')
  c.option('--fixed-columns COLUMNS', 'The columns that should stay fixed.')
  c.when_called do|args, options|
    # Open input file.
    abort("Output file required") if options.output.nil?
    abort("Input file required") if args.length == 0
    input = Spreadsheet.open(args.first)
    
    # Run columnizer.
    columnizer = Xls::Columnizer.new()
    columnizer.fixed_columns = options.fixed_columns.to_s.split(",")
    output = columnizer.process(input)
    
    # Write output to file.
    output.write(options.output)
  end
end
